# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(systemd VERSION 0.0.0 LANGUAGES C)

set(CPACK_PACKAGE_NAME luasandbox-${PROJECT_NAME})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Lua systemd Module")

set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_PACKAGE_VENDOR        "Mozilla Services")
set(CPACK_PACKAGE_CONTACT       "Mike Trinkala <trink@mozilla.com>")
set(CPACK_OUTPUT_CONFIG_FILE    "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cpack")
set(CPACK_STRIP_FILES           TRUE)

set(CPACK_DEBIAN_PACKAGE_DEPENDS "luasandbox (>= 1.0)")
set(CPACK_RPM_PACKAGE_LICENSE    "MIT License")

if(MSVC)
    set(CMAKE_C_FLAGS           "/W3")
    set(CMAKE_C_FLAGS_RELEASE   "/MD /O2 /Ob2")
else()
    set(CMAKE_C_FLAGS           "-D_GNU_SOURCE -fPIC -Wall")
    set(CMAKE_C_FLAGS_RELEASE   "-O2")
	set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
endif()
set(CMAKE_SHARED_LIBRARY_PREFIX "")

if(LUA51) # build against installed lua 5.1
	set(CPACK_PACKAGE_NAME lua-${PROJECT_NAME})
    find_package(Lua51)
    find_program(LUA NAMES lua lua.bat)
    add_test(NAME test COMMAND ${LUA} test.lua)
else() # lua_sandbox build
	find_package(luasandbox 1.0.2 REQUIRED CONFIG)
	set(LUA_LIBRARIES ${LUASANDBOX_LIBRARIES})
	set(LUA_INCLUDE_DIR ${LUASANDBOX_INCLUDE_DIR}/luasandbox)
endif()

find_library(SYSTEMD_LIBRARY systemd REQUIRED)

include(CPack)
include_directories(${LUA_INCLUDE_DIR} vendor/compat-5.3/c-api)

file(WRITE systemd_daemon_core.def "EXPORTS\nluaopen_systemd_daemon_core\n")
set(SRC_SYSTEMD_DAEMON_CORE
src/daemon.c
systemd_daemon_core.def
)

add_library(systemd_daemon_core SHARED ${SRC_SYSTEMD_DAEMON_CORE})
set_target_properties(systemd_daemon_core PROPERTIES OUTPUT_NAME core LIBRARY_OUTPUT_DIRECTORY systemd/daemon)
target_link_libraries(systemd_daemon_core ${LUA_LIBRARIES} ${SYSTEMD_LIBRARY})

file(WRITE systemd_id128_core.def "EXPORTS\nluaopen_systemd_id128_core\n")
set(SRC_SYSTEMD_ID128_CORE
src/id128.c
src/messages.c
systemd_id128_core.def
)

add_library(systemd_id128_core SHARED ${SRC_SYSTEMD_ID128_CORE})
set_target_properties(systemd_id128_core PROPERTIES OUTPUT_NAME core LIBRARY_OUTPUT_DIRECTORY systemd/id128)
target_link_libraries(systemd_id128_core ${LUA_LIBRARIES} ${SYSTEMD_LIBRARY})

file(WRITE systemd_journal_core.def "EXPORTS\nluaopen_systemd_journal_core\n")
set(SRC_SYSTEMD_JOURNAL_CORE
src/id128.c
src/messages.c
src/journal.c
systemd_journal_core.def
)

add_library(systemd_journal_core SHARED ${SRC_SYSTEMD_JOURNAL_CORE})
set_target_properties(systemd_journal_core PROPERTIES OUTPUT_NAME core LIBRARY_OUTPUT_DIRECTORY systemd/journal)
target_link_libraries(systemd_journal_core ${LUA_LIBRARIES} ${SYSTEMD_LIBRARY})



set(SRC_SYSTEMD
src/daemon.c
src/id128.c
src/messages.c
src/journal.c
src/login.c
vendor/compat-5.3/c-api/compat-5.3.c
systemd.def
)


set(EMPTY_DIR ${CMAKE_BINARY_DIR}/empty)
file(MAKE_DIRECTORY ${EMPTY_DIR})
set(DPERMISSION DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
install(DIRECTORY ${EMPTY_DIR}/ DESTINATION ${INSTALL_IOMODULE_PATH} ${DPERMISSION})
install(DIRECTORY ${EMPTY_DIR}/ DESTINATION ${INSTALL_IOMODULE_PATH}/systemd ${DPERMISSION})
install(TARGETS systemd_daemon_core DESTINATION ${INSTALL_IOMODULE_PATH}/systemd/daemon)
install(TARGETS systemd_id128_core DESTINATION ${INSTALL_IOMODULE_PATH}/systemd/id128)
install(TARGETS systemd_journal_core DESTINATION ${INSTALL_IOMODULE_PATH}/systemd/journal)

set(SYSTEMD_MODULES
src/init.lua
src/daemon.lua
src/id128.lua
src/journal.lua
src/login.lua
src/messages.lua
)

install(FILES ${SYSTEMD_MODULES} DESTINATION ${INSTALL_MODULE_PATH}/systemd)
